#!/usr/bin/env python
# Repeat a certain block using looped index
# "[:1:]" will be replaced by integers from $begin to $end
# usage: cataseries template.addWater.yaml params.yaml
# Author: Yuhang(Steven) Wang
# Date: 03/15/2017
# License: MIT/X11

import re
import sys
import yaml
import json
import itertools

def range_replace(s, start, stop):
    """Replace [:I:] in string s by range(start, stop+1)"""
    return list(
        map(
            lambda i: re.sub(r"\[\:I\:\]", str(i), s),
            range(start, stop+1)
        )
    )

def  flatten_list(ls):
    return list(itertools.chain(*ls))

def replace(content_list: list, params: list):
    if len(params) == 0:
        return "\n".join(content_list)
    elif isinstance(params[0], str):
        return replace(
            list(map(
                    lambda s: re.sub(r"\[\:1\:\]", str(params[0]), s),
                    content_list
                )
            ),
            params[1:]
        )
    elif isinstance(params[0], list) and isinstance(params[0][0], int):
        assert len(params[0]) == 2
        return replace(
            flatten_list(
                list(
                    map(
                        lambda s: range_replace(s, params[0][0], params[0][1]),
                        content_list
                    )
                )
            ),
            params[1:]
        )
    else:
        return "\n".join(content_list)

def savetxt(f_out, content):
    with open(f_out, 'w') as OUT:
        OUT.write(content)


def main(args):
    template = args[0]
    out_prefix = template.replace("template.","").replace(".yaml", "")
    file_params = args[1]
    with open(file_params, "r") as IN:
        params = yaml.load(IN)
    with open(template, 'r') as IN:
        content = IN.read()
    new_yaml = "\n".join(list(map(lambda p: replace([content],p), params)))
    print(new_yaml)
    f_yaml = "{}.yaml".format(out_prefix)
    savetxt(f_yaml, new_yaml)


if __name__ == '__main__':
    main(sys.argv[1:])
